# This is a basic workflow to help you get started with Actions
 
name: GitHub-Flyway-AutoPilot-Pipeline-Windows

on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  #push:
    #branches:
      #- release
      #- 'migrations/**'
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
 
  RUNNER_VERSION: "windows-latest" # Options are - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
  FLYWAY_LICENSE_KEY: "FL01404B039A4F4E0AA0943C07036C69D32E234CE5B368E0DC906B1FF4F4D822B118C26BAF5D4FC6657A9BBA5B07FD5DA3E4F89C20D4C32329D76C9FCFAEFD73821D507F7D9DC42C77BF6EBE0E737616AF40CEDA8751B167FC8D11D9B81442AB1F581152839C213774CA55022269B632573CE9105E397AED927630523D0DA476E36F16622ED6FF34ACC92E5F376536F085C54FCACFFFAFF29C338CB8573651219D8623B3712385FC632BFC1B5D230E8B1673C476615B4F48825EADD82F3CC2374BB7C85BB6357CBD30D09D12F44A963918E596B56532AE3C2A895F6978EBB296B327EFF9EE1435283FC059086C85F0FFDB09385EB475779D6E2FF195F3A7E8D1113E" #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  BASELINE_VERSION: "001" # This should match the version number of your baseline script
  FIRST_UNDO_SCRIPT: "002"
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: false
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true # For security purposes, this is set to true to enable latest Node20 version

  # Optional - For Microsoft Hosted Agents, it's necessary to ensure Flyway is installed on each run. Therefore, the below variables are required
  GITHUB_HOSTED_RUNNER: "true" # Setting to false will skip the Flyway CLI check step
  FLYWAY_VERSION: "10.17.3" # This outlines the version of Flyway CLI that will be downloaded if no Flyway CLI is detected on the target agent
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: "windows-latest" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'build' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configFilesured 
    env:
      stage: 'Build'
      
      # Environment Secrets - In a Production setup, Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      DATABASE_NAME: "AutoPilotBuild"
      ENVIRONMENT: "Build" # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      TARGET_DATABASE_USERNAME : "Redgate" # If using SQL Authentication, make sure to populate these fields!
      TARGET_DATABASE_PASSWORD : "Redg@te1" # If using SQL Authentication, make sure to populate these fields!

      displayName: 'Build'
      executeBuild: true
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Flyway - CLI Install ManualValidation
        if: env.GITHUB_HOSTED_RUNNER == 'true'
        run: |
          $scriptPath = "${{ GITHUB.WORKSPACE }}/scripts/Flyway_DownloadAndInstallCLI.ps1"
          if (Test-Path $scriptPath) {
            Write-Host "Script found. Running Flyway_DownloadAndInstallCLI.ps1..."
            & $scriptPath
            Write-Host "Updating PATH environment variable to include Flyway CLI Path"
              echo "C:\FlywayCLI\flyway-${{ env.FLYWAY_VERSION }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } 
          else {
            Write-Host "Error: Script not found at path $scriptPath"
            exit 1
          }
      
      # Runs the Flyway Clean command against the Build database
      - name: Clean Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info clean info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -cleanDisabled='false' "-plugins.clean.mode=all"
        
      # Runs the Flyway Migrate command against the Build database
      - name: Migrate Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info migrate info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -cleanDisabled='false' -baselineOnMigrate="true"
          
      # Runs the Flyway Undo command against the Build database
      - name: undo Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info undo info -environment="${{ env.ENVIRONMENT }}" -user=${{ env.TARGET_DATABASE_USERNAME }} -password=${{ env.TARGET_DATABASE_PASSWORD }} -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -baselineOnMigrate="true" -cleanDisabled='false' -target="${{ env.FIRST_UNDO_SCRIPT }}"
 
       # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}/migrations Artifact_Files/Migration/
 
      
      #After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-build-artifact
          path: Artifact_Files/Migration/

  test:
    name: Deploy Test
    # The type of runner that the job will run on
    runs-on: "windows-latest" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'test' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configFilesured 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: build
    env:
      stage: 'Test'

      DATABASE_NAME: "AutoPilotTest"

      ENVIRONMENT: "Test" # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      TARGET_DATABASE_USERNAME : "Redgate" # If using SQL Authentication, make sure to populate these fields!
      TARGET_DATABASE_PASSWORD : "Redg@te1" # If using SQL Authentication, make sure to populate these fields!

      CHECK_ENVIRONMENT: "Check" # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      CHECK_DATABASE_USERNAME : "Redgate" # If using SQL Authentication, make sure to populate these fields!
      CHECK_DATABASE_PASSWORD : "Redg@te1" # If using SQL Authentication, make sure to populate these fields!
      # End of Environment Secrets #
      generateDriftAndChangeReport: true
      failReleaseIfDriftDetected: false
      staticCodeAnalysis: false #Currently not setup in this pipeline
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Flyway - CLI Install ManualValidation
        if: env.GITHUB_HOSTED_RUNNER == 'true'
        run: |
          $scriptPath = "${{ GITHUB.WORKSPACE }}/scripts/Flyway_DownloadAndInstallCLI.ps1"
          if (Test-Path $scriptPath) {
            Write-Host "Script found. Running Flyway_DownloadAndInstallCLI.ps1..."
            & $scriptPath
            Write-Host "Updating PATH environment variable to include Flyway CLI Path"
              echo "C:\FlywayCLI\flyway-${{ env.FLYWAY_VERSION }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } 
          else {
            Write-Host "Error: Script not found at path $scriptPath"
            exit 1
          }

       # Runs the Flyway Check command, to produce a deployment report, against the Production database
      - name: Create Check Reports
        if: env.generateDriftAndChangeReport == 'true'
        run: |
          flyway check -dryrun -changes -drift -environment="${{ env.ENVIRONMENT }}" -user=${{ env.TARGET_DATABASE_USERNAME }} -password=${{ env.TARGET_DATABASE_PASSWORD }} -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" "-check.failOnDrift=${{ env.failReleaseIfDriftDetected }}" "-check.buildEnvironment=${{ env.CHECK_ENVIRONMENT }}" "-environments.${{ env.CHECK_ENVIRONMENT }}.user=${{ env.CHECK_DATABASE_USERNAME }}" "-environments.${{ env.CHECK_ENVIRONMENT }}.password=${{ env.CHECK_DATABASE_PASSWORD }}" "-reportFilename=${{ GITHUB.WORKSPACE }}\reports\${{ env.databaseName }}-Run-${{ GITHUB.RUN_ID }}-${{ env.ENVIRONMENT }}-Check-Report.html" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}"
        continue-on-error: true

        # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}\reports Artifact_Files/Reports/

      - name: Publish Check Report as Artifact
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-reports-test
          path: Artifact_Files/Reports/
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        if: ${{ true }}
        run: |
          flyway info migrate info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations"

  prod:
    name: Deploy Prod
    # The type of runner that the job will run on
    runs-on: "windows-latest" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configFilesured 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: test
    env:
      stage: 'Prod'

      DATABASE_NAME: "AutoPilotProd"

      ENVIRONMENT: "Prod"  # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      TARGET_DATABASE_USERNAME : "Redgate" # If using SQL Authentication, make sure to populate these fields!
      TARGET_DATABASE_PASSWORD : "Redg@te1" # If using SQL Authentication, make sure to populate these fields!

      CHECK_ENVIRONMENT: "Check" # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      CHECK_DATABASE_USERNAME : "Redgate" # If using SQL Authentication, make sure to populate these fields!
      CHECK_DATABASE_PASSWORD : "Redg@te1" # If using SQL Authentication, make sure to populate these fields!
      # End of Environment Secrets #
      generateDriftAndChangeReport: true
      failReleaseIfDriftDetected: false
      staticCodeAnalysis: false #Currently not setup in this pipeline
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Flyway - CLI Install ManualValidation
        if: env.GITHUB_HOSTED_RUNNER == 'true'
        run: |
          $scriptPath = "${{ GITHUB.WORKSPACE }}/scripts/Flyway_DownloadAndInstallCLI.ps1"
          if (Test-Path $scriptPath) {
            Write-Host "Script found. Running Flyway_DownloadAndInstallCLI.ps1..."
            & $scriptPath
            Write-Host "Updating PATH environment variable to include Flyway CLI Path"
              echo "C:\FlywayCLI\flyway-${{ env.FLYWAY_VERSION }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } 
          else {
            Write-Host "Error: Script not found at path $scriptPath"
            exit 1
          }

       # Runs the Flyway Check command, to produce a deployment report, against the Production database
      - name: Create Check Reports
        if: env.generateDriftAndChangeReport == 'true'
        run: |
          flyway check -dryrun -changes -drift -environment="${{ env.ENVIRONMENT }}" -user=${{ env.TARGET_DATABASE_USERNAME }} -password=${{ env.TARGET_DATABASE_PASSWORD }} -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" "-check.failOnDrift=${{ env.failReleaseIfDriftDetected }}" "-check.buildEnvironment=${{ env.CHECK_ENVIRONMENT }}" "-environments.${{ env.CHECK_ENVIRONMENT }}.user=${{ env.CHECK_DATABASE_USERNAME }}" "-environments.${{ env.CHECK_ENVIRONMENT }}.password=${{ env.CHECK_DATABASE_PASSWORD }}" "-reportFilename=${{ GITHUB.WORKSPACE }}\reports\${{ env.databaseName }}-Run-${{ GITHUB.RUN_ID }}-${{ env.ENVIRONMENT }}-Check-Report.html" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}"
        continue-on-error: true

        # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}\reports Artifact_Files/Reports/

      - name: Publish Check Report as Artifact
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-reports-prod
          path: Artifact_Files/Reports/
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        if: ${{ true }}
        run: |
          flyway info migrate info -environment="${{ env.ENVIRONMENT }}" -user="${{ env.TARGET_DATABASE_USERNAME }}" -password="${{ env.TARGET_DATABASE_PASSWORD }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations"
